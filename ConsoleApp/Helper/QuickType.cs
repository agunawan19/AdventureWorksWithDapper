// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var bible = Bible.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Bible
    {
        [JsonProperty("data")]
        public Data Data { get; set; }
    }

    public partial class Data
    {
        [JsonProperty("passages")]
        public Passages Passages { get; set; }
    }

    public partial class Passages
    {
        [JsonProperty("version")]
        public string Version { get; set; }

        [JsonProperty("book")]
        public string Book { get; set; }

        [JsonProperty("chapter")]
        public long Chapter { get; set; }

        [JsonProperty("verses")]
        public List<Verse> Verses { get; set; }
    }

    public partial class Verse
    {
        [JsonProperty("verse")]
        public long VerseVerse { get; set; }

        [JsonProperty("type")]
        public TypeEnum Type { get; set; }

        [JsonProperty("content")]
        public string Content { get; set; }
    }

    public enum TypeEnum { Content, Title };

    public partial class Bible
    {
        public static Bible FromJson(string json) => JsonConvert.DeserializeObject<Bible>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Bible self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                TypeEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "content":
                    return TypeEnum.Content;
                case "title":
                    return TypeEnum.Title;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            switch (value)
            {
                case TypeEnum.Content:
                    serializer.Serialize(writer, "content");
                    return;
                case TypeEnum.Title:
                    serializer.Serialize(writer, "title");
                    return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }
}
